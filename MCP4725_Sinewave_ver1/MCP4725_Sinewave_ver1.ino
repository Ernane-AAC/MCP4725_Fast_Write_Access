// ========================================================================================
// MCP4725 - Sine wave generator - VERSION 1 - Library: Adafruit_MCP4725.h
// UNVERSIDADE FEDERAL DE UBERLÂNDIA - Faculdade de Engenharia Elétrica
// Subject: DSP-EPS - Prof. Ernane A. A. Coelho - http://lattes.cnpq.br/9183492978798433
// Code to generate a sinusoidal waveform using the D/A converter i2c MCP4725
// Lab System -> Arduino UNO plus MCP4725A0 Module 
//   -> Sample rate: 2kHz -> timer 1 overflow interrupt
//   -> the waveform data points are calculated in real time (12-bit samples)
// ========================================================================================

#include <math.h>
#include <Wire.h>
#include <Adafruit_MCP4725.h>
#define MCP4725_Address 0x60
                         
Adafruit_MCP4725 dac;
float vsin,delta_t,phase,w,fsample; //variables to calculate the waveform
unsigned int int_counter;
int sample;

// =================== SETUP ==============================================================
void setup(){
  Serial.begin(115200);
  PORTB = 0x00; //reset PORTB output data
  DDRB |= 0x21; //0010 0001 -> set PB5 (Onboad LED) and PB0 to output
  delay(5000);
  Serial.println("Code for sinusoidal waveform generation");

  // initializations
  w=2*PI*50;// fundamental angular frequency 50Hz, PI=internal Arduino IDE constant
  phase=0;           // start phase at 0 rad
  delta_t=1/2000.0f; // sample period
  int_counter=0;     // start timer1 interrupt counter

  dac.begin(MCP4725_Address);

  Timer1_Init();   //Config Timer1: Fast-PWM Mode, 2kHz
}

// =================== LOOP ===============================================================
void loop(){
  asm("NOP");  //no task, wave is generated by ISR
}

// ========================================================================================
// ========== Interrupt Service Routine of Timer1 Overflow ================================
ISR(TIMER1_OVF_vect)
{
 PINB |=0x01;    //toggle PB0 - used to measure the duration of ISR (real time check) 
 sei();          //enable global interrupt flag for TWI interrupt recognition   
 phase=phase+w*delta_t; //time integral of w
 if(phase > TWO_PI) phase=phase-TWO_PI; //anti-windup, TWO_PI=internal Arduino IDE constant
 vsin=0.9*sin(phase);  //restrict the amplitude so as not to saturate the D/A converter
 fsample=(vsin*2047.0f) + 2048; //adjust the sample to the range of the D/A converter
 sample=(int)fsample; //convert float sample to int
 
 dac.setVoltage(sample, false); //send sample to MCP4725
 
 int_counter++;
 if (int_counter>=1000) 
    {
     int_counter=0;
     PINB |=0x20; //blink Onboard LED at 1Hz
    } 
 PINB |=0x01;    //toggle PB0 - used to measure the duration of ISR (real time check)
}

// ========================================================================================
// ================  Timer1 Initialization ================================================
void Timer1_Init(void)
{              
 //------------------------------------------------------------
 //TCCR1A - Timer/Counter1 Control Register A
 //Bit        7      6      5      4     3     2     1      0
 //(0x80) COM1A1 COM1A0 COM1B1 COM1B0    –     –  WGM11  WGM10 
 //Init. Val. 0      0      0      0     0     0     0      0
 //This code  0      0      0      0     0     0     1      1   -> Normal port operation, OC1A/OC1B disconnected.
 //------------------------------------------------------------ -> Waveform generation Mode=15 Fast PWM  
 TCCR1A=0x03;  //                                               -> WGM=15 -> WGM11:WGM10=11 
 //------------------------------------------------------------           
 //TCCR1B – Timer/Counter1 Control Register B
 //Bit       7     6     5     4     3     2     1     0
 //(0x81) ICNC1 ICES1    –  WGM13 WGM12  CS12  CS11  CS10 
 //Init. Val. 0      0   0    0     0     0     0      0
 //This code  0      0   0    1     1     0     1      0        -> Waveform generation Mode=15 WGM=15  
 //------------------------------------------------------------ ->  WGM13:WGM12=11; clk_timer=clk_cpu/2=2MHz
 TCCR1B=0x1A;
                           
 //->Timer Cycle = Timer_CLK/(1000 steps)=2MHz/1000=2kHz (sample rate)
 //-> 1000 steps in counting up -> TOP=999 
 OCR1A=999;
         
 //------------------------------------------------------------
 //TIMSK1 – Timer/Counter1 Interrupt Mask Register
 //Bit        7    6    5    4    3      2      1     0
 //(0x6F)     –    – ICIE1   –    –  OCIE1B OCIE1A  TOIE1 
 //Read/Write R    R   R/W   R    R     R/W    R/W   R/W
 //Init. Val. 0    0    0    0    0      0      0     0
 //This code  0    0    0    0    0      0      0     1       -> enable Timer1 overflow interrupt
 //------------------------------------------------------------
 TIMSK1=0x01;  //habilita Timer1 overflow interrupt
} 
